#!/usr/bin/env python3

############################################################################

import json
import sys
import requests
import time
import cyberprobe.qcomms as q

############################################################################

if len(sys.argv) < 2:
    binding = "ioc"
else:
    binding = sys.argv[1]

if len(sys.argv) < 3:
    gaffer = "http://gaffer:8080/rest/v1"
else:
    gaffer = sys.argv[2]

############################################################################

session = requests.session()

############################################################################

def add_edge(edges, group, s, d):
    edges.append((group, s, d))

def add_vertex(vertices, group, v):
    vertices.append((group, v))

############################################################################

def init():
    pass

def gaffer_output(vertices, edges):

    body = {}
    body["input"] = []
    body["class"] = "uk.gov.gchq.gaffer.operation.impl.add.AddElements"
    body["validate"] = True
    body["skipInvalidElements"] = False

    for v in vertices:

        elt = {}
        elt["class"] = "uk.gov.gchq.gaffer.data.element.Entity"
        elt["group"] = v[0]
        elt["vertex"] = v[1]
        elt["properties"] = { "count": 1 }

        body["input"].append(elt)

    for v in edges:

        elt = {}
        elt["directed"] = True
        elt["class"] = "uk.gov.gchq.gaffer.data.element.Edge"
        elt["group"] = v[0]
        elt["source"] = v[1]
        elt["destination"] = v[2]
        elt["properties"] = { "count": 1 }

        body["input"].append(elt)

    while True:
        try:
            url = gaffer + "/graph/doOperation/add/elements"
            r = requests.put(url,
                             data=json.dumps(body),
                             headers={"Content-Type": "application/json"})

            # Ignore a valid HTTP response.  Errors are probably bugs in my
            # code.
            if r.status_code < 200 or r.status_code > 299:
                sys.stderr.write("gaffer: Error sending to Gaffer\n")
                sys.stderr.write("gaffer: HTTP code: %s\n" % str(r.status_code))
                sys.stderr.write(r.text + "\n")
            break
        except Exception as e:
            # Keep retrying for transport errors
            sys.stderr.write("gaffer: Could not deliver to Gaffer...\n")
            sys.stderr.write("gaffer: Exception: %s\n" % str(e))
            time.sleep(1)
  
############################################################################
def handle(msg, output):

    obj = json.loads(msg)

    if obj["action"] == "connected_up":
        return

    if obj["action"] == "connected_down":
        return

    vertices = []
    edges = []

    sip = None
    sport = None
    dip = None
    dport = None
    proto = None

    if "src" in obj:
        ip = None
        for v in obj["src"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if cls == "ipv4":
                sip = addr

            if cls == "tcp":
                sport = addr
                proto = "tcp"

            if cls == "udp":
                sport = addr
                proto = "udp"

    if "dest" in obj:
        ip = None
        for v in obj["dest"]:
            if v.find(":") < 0:
                cls = v
                addr = ""
            else:
                cls = v[0:v.find(":")]
                addr = v[v.find(":") + 1:]

            if cls == "ipv4":
                dip = addr

            if cls == "tcp":
                dport = addr
                proto = "tcp"

            if cls == "udp":
                dport = addr
                proto = "udp"

    if sip != None and sport != None and dip != None and dport != None and \
       proto == "tcp":
        src = sip + ":" + sport
        dest = dip + ":" + dport
        add_vertex(vertices, "ip", sip)
        add_vertex(vertices, "ip", dip)
        add_edge(edges, "ipflow", sip, dip)
        add_vertex(vertices, "tcp", src)
        add_vertex(vertices, "tcp", dest)
        add_edge(edges, "tcpflow", src, dest)

        if "url" in obj and obj["action"] == "http_request":
            add_edge(edges, "httprequest", src, obj["url"])

    if sip != None and sport != None and dip != None and dport != None and \
       proto == "udp":
        src = sip + ":" + sport
        dest = dip + ":" + dport
        add_vertex(vertices, "ip", sip)
        add_vertex(vertices, "ip", dip)
        add_edge(edges, "ipflow", sip, dip)
        add_vertex(vertices, "udp", src)
        add_vertex(vertices, "udp", dest)
        add_edge(edges, "udpflow", src, dest)

        if obj["action"] == "dns_message" and "query" in obj["dns_message"]:
            for v in obj["dns_message"]["query"]:
                if "name" in v:
                    add_edge(edges, "dnsrequest", src, v["name"])

    gaffer_output(vertices, edges)

############################################################################

print("Connecting to Gaffer...")
while True:
    url = gaffer + "/status"
    try:
        r = requests.get(url)
    except:
        print("Not connected, will retry...")
        time.sleep(10)
        continue

    if r.status_code == 200: break

    print("Not connected, will retry...")
    time.sleep(10)

print("Connected.")

try:
    q.subscribe(binding, handle)
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))


