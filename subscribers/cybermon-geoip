#!/usr/bin/env python3

import json
import sys
import geoip2.database
import cyberprobe.qcomms as q
import os

try:
    db = os.getenv("GEOIP_DB", "/usr/share/GeoIP/GeoLite2-City.mmdb")
    geo = geoip2.database.Reader(db)
except Exception as e:
    print("Exception:", e)
    print("GeoIP2 city data could not be configured.")
    print("No city geo will be generated.")
    geo = None

try:
    db2 = os.getenv("GEOIP_DB", "/usr/share/GeoIP/GeoLite2-ASN.mmdb")
    geo2 = geoip2.database.Reader(db2)
except Exception as e:
    print("Exception:", e)
    print("GeoIP2 ASN data could not be configured.")
    print("No ASN data will be generated.")
    geo2 = None

if len(sys.argv) < 2:
    binding = "cyberprobe"
else:
    binding = sys.argv[1]
    
if len(sys.argv) < 3:
    output = "geo"
else:
    output = sys.argv[2]

def lookup(ip):

    g = None
    asn = None

    if geo:
        try:
            g = geo.city(ip)
        except:
            pass

    if geo2:
        try:
            asn = geo2.asn(ip)
        except:
            pass

    locn = {
    }

    if g:
        if g.city and g.city.name:
            locn["city"] = g.city.name
        if g.country.iso_code: locn["iso"] = g.country.iso_code
        if g.country.name: locn["country"] = g.country.name
        if g.location.latitude and g.location.longitude: locn["position"] = {
                "lat": g.location.latitude,
                "lon": g.location.longitude
        }
        if g.postal.code: locn["postcode"] = g.postal.code

    if asn:
        locn["asnum"] = asn.autonomous_system_number
        locn["asorg"] = asn.autonomous_system_organization

    return locn
    
def handle(msg, output):

    try:
    
        obj = json.loads(msg)

        sip = None
        dip = None

        for v in obj["src"]:
            if v.startswith("ipv4:"):
                sip = v[5:]
                break
    
        for v in obj["dest"]:
            if v.startswith("ipv4:"):
                dip = v[5:]
                break

        if sip != None:
            g = lookup(sip)
            if g != None:
                if "location" not in obj: obj["location"] = {}
                obj["location"]["src"] = g

        if dip != None:
            g = lookup(dip)
            if g != None:
                if "location" not in obj: obj["location"] = {}
                obj["location"]["dest"] = g
            
        output(json.dumps(obj))

    except Exception as e:
        pass

try:
    q.subscribe(binding, handle, output)
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

